(load "simply.scm")

(define GROUPS '(thousand million billion trillion quadrillion quintillion sextillion septillion
                          octillion nonillion decillion))

(define (last3 n) 
  (cond ((< (count n) 3) n) 
        (else (word (last (butlast (butlast n))) 
                    (last (butlast n)) 
                    (last n)))))

(define (butlast3 n) 
  (cond ((<= (count n) 3) "") 
        (else (word (first n) 
                    (butlast3 (butfirst n))))))

(define (to-triples n) 
  (cond ((empty? n) 
         ()) 
        (else (se (to-triples (butlast3 n)) 
                  (last3 n)))))

(define (teenword n) 
  (cond ((= n 10) 'ten) 
        ((= n 11) 'eleven) 
        ((= n 12) 'twelve) 
        ((= n 13) 'thirteen) 
        ((= n 15) 'fifteen) 
        (else (word (onesword (- n 10)) 'teen))))

(define (onesword n) 
  (cond ((= n 1) 'one) 
        ((= n 2) 'two) 
        ((= n 3) 'three) 
        ((= n 4) 'four) 
        ((= n 5) 'five) 
        ((= n 6) 'six) 
        ((= n 7) 'seven) 
        ((= n 8) 'eight) 
        ((= n 9) 'nine) 
        (else ())))

(define (tensword n) 
  (cond ((= n 2) 'twenty) 
        ((= n 3) 'thirty) 
        ((= n 4) 'forty) 
        ((= n 5) 'fifty) 
        ((= n 6) 'sixty) 
        ((= n 7) 'seventy) 
        ((= n 8) 'eighty) 
        ((= n 9) 'ninety) 
        (else ())))

(define (hundredsword n) 
  (cond ((> n 0) 
         (se (onesword n) 'hundred)) 
        (else ())))

(define (groupword n names) 
  (cond ((empty? names) 
         ()) 
        ((= (- n 1) 1) 
         (first names)) 
        (else (groupword (- n 1) 
                         (butfirst names)))))

(define (name-with-group triple level) 
  (cond ((not (empty? (to-name triple))) 
         (se (to-name triple) 
             (groupword level GROUPS))) 
        (else ())))

(define (to-name triple) 
  (cond ((< triple 1) 
         ()) 
        ((< triple 10) 
         (onesword triple)) 
        ((< triple 20) 
         (teenword triple)) 
        ((< triple 100) 
         (se (tensword (first (butfirst triple))) 
             (onesword (last triple)))) 
        (else (se (hundredsword (first triple)) 
                  (to-name (butfirst triple))))))

(define (group triples) 
  (cond ((empty? triples) 
         ()) 
        (else (se (name-with-group (first triples) 
                                   (count triples)) 
                  (group (butfirst triples))))))

(define (number-name n) 
  (group (to-triples n)))

(restart 1)
(butlast3 12345)
(number-name 215000014006098207483)
(number-name 1910000111)
(teenword 010)
